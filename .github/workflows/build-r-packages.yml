name: Build R Packages

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        r-version: ['4.2.0']
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r-version }}

      - name: Debug Information
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Find DESCRIPTION files:"
          find . -name "DESCRIPTION"
        shell: bash

      - name: Install dependencies
        run: |
          Rscript -e '
            install.packages(c("devtools", "remotes"), dependencies = TRUE)
          '

      - name: Build package
        run: |
          # Different commands for different OS
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            R CMD build .
            R CMD INSTALL --build .
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            R CMD build .
            R CMD INSTALL --build .
          else
            R CMD build .
          fi
        shell: bash

      - name: Create Repository Structure
        run: |
          Rscript -e '
            repo_path <- "packages"
            
            # Create directories
            dir.create(file.path(repo_path, "src", "contrib"), recursive = TRUE)
            dir.create(file.path(repo_path, "bin", "windows", "contrib", R.Version()$major), recursive = TRUE)
            dir.create(file.path(repo_path, "bin", "macosx", "contrib", R.Version()$major), recursive = TRUE)
            
            # Move files to appropriate directories
            src_files <- list.files(".", pattern = "\\.tar\\.gz$")
            win_files <- list.files(".", pattern = "\\.zip$")
            mac_files <- list.files(".", pattern = "\\.tgz$")
            
            if(length(src_files) > 0) file.copy(src_files, file.path(repo_path, "src", "contrib"), overwrite = TRUE)
            if(length(win_files) > 0) file.copy(win_files, file.path(repo_path, "bin", "windows", "contrib", R.Version()$major), overwrite = TRUE)
            if(length(mac_files) > 0) file.copy(mac_files, file.path(repo_path, "bin", "macosx", "contrib", R.Version()$major), overwrite = TRUE)
            
            # Create PACKAGES files
            tools::write_PACKAGES(file.path(repo_path, "src", "contrib"), type = "source")
            if(length(win_files) > 0) tools::write_PACKAGES(file.path(repo_path, "bin", "windows", "contrib", R.Version()$major), type = "win.binary")
            if(length(mac_files) > 0) tools::write_PACKAGES(file.path(repo_path, "bin", "macosx", "contrib", R.Version()$major), type = "mac.binary")
          '

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages
          path: "*.tar.gz, *.zip, *.tgz"

      - name: Move Packages to Repository
        run: |
          mkdir -p packages
          mv *.tar.gz *.zip *.tgz packages/ 2>/dev/null || true

      - name: Test Package Installation
        run: |
          Rscript -e '
          # Set repository to local packages directory
          pkgs <- jsonlite::fromJSON("packages.json")$package
          
          # Try to install each package from local files
          results <- lapply(pkgs, function(pkg) {
            pkg_file <- list.files("packages", pattern = paste0(pkg, "_.*\\.(tar\\.gz|zip|tgz)$"), full.names = TRUE)[1]
            if(is.na(pkg_file)) {
              return(sprintf("Package file not found for %s", pkg))
            }
            
            tryCatch({
              install.packages(pkg_file, repos = NULL, type = "source", dependencies = TRUE)
              sprintf("Successfully installed %s", pkg)
            }, error = function(e) {
              sprintf("Failed to install %s: %s", pkg, e$message)
            })
          })
          
          # Print results
          cat(unlist(results), sep = "\n")
          
          # Check if any installations failed
          if(any(grepl("Failed|not found", unlist(results)))) {
            quit(status = 1)
          }
          '

      - name: Update packages.json
        run: |
          # Your existing packages.json update script
          
      - name: Test Repository
        run: |
          Rscript -e '
            # Add local repository to repos
            local_repo <- paste0("file:", getwd(), "/packages")
            repos <- c(local = local_repo, CRAN = "https://cloud.r-project.org")
            
            # List available packages
            available_pkgs <- available.packages(contrib.url(local_repo))
            print(available_pkgs)
            
            # Try installing from local repo
            install.packages(rownames(available_pkgs), repos = repos, dependencies = TRUE)
          '
          