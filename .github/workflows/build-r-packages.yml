name: Build R Packages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'

      - name: Install Dependencies
        run: Rscript -e "install.packages(c('devtools', 'remotes'), dependencies=TRUE)"

      - name: Build R Package (Linux/Mac)
        if: matrix.os != 'windows-latest'
        run: |
          R CMD build .

      - name: Build R Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          R CMD build --binary .

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages
          path: "*.tar.gz, *.zip, *.tgz"

      - name: Move Packages to Repository
        run: |
          mkdir -p packages
          mv *.tar.gz *.zip *.tgz packages/ 2>/dev/null || true

      - name: Test Package Installation
        run: |
          Rscript -e '
          # Set repository to local packages directory
          pkgs <- jsonlite::fromJSON("packages.json")$package
          
          # Try to install each package from local files
          results <- lapply(pkgs, function(pkg) {
            pkg_file <- list.files("packages", pattern = paste0(pkg, "_.*\\.(tar\\.gz|zip|tgz)$"), full.names = TRUE)[1]
            if(is.na(pkg_file)) {
              return(sprintf("Package file not found for %s", pkg))
            }
            
            tryCatch({
              install.packages(pkg_file, repos = NULL, type = "source", dependencies = TRUE)
              sprintf("Successfully installed %s", pkg)
            }, error = function(e) {
              sprintf("Failed to install %s: %s", pkg, e$message)
            })
          })
          
          # Print results
          cat(unlist(results), sep = "\n")
          
          # Check if any installations failed
          if(any(grepl("Failed|not found", unlist(results)))) {
            quit(status = 1)
          }
          '

      - name: Update packages.json
        run: |
          # Your existing packages.json update script
          
      - name: Create Repository Structure
        run: |
          Rscript -e '
            # Create repository structure
            repo_path <- "packages"
            dir.create(file.path(repo_path, "src", "contrib"), recursive = TRUE)
            
            # Move source packages to src/contrib
            source_files <- list.files(".", pattern = "\\.tar\\.gz$")
            file.copy(source_files, file.path(repo_path, "src", "contrib"), overwrite = TRUE)
            
            # Create PACKAGES files
            tools::write_PACKAGES(file.path(repo_path, "src", "contrib"), type = "source")
            
            # For binary packages (Windows)
            if (file.exists("*.zip")) {
              win_path <- file.path(repo_path, "bin", "windows", "contrib", R.Version()$major)
              dir.create(win_path, recursive = TRUE)
              win_files <- list.files(".", pattern = "\\.zip$")
              file.copy(win_files, win_path, overwrite = TRUE)
              tools::write_PACKAGES(win_path, type = "win.binary")
            }
            
            # For binary packages (Mac)
            if (file.exists("*.tgz")) {
              mac_path <- file.path(repo_path, "bin", "macosx", "contrib", R.Version()$major)
              dir.create(mac_path, recursive = TRUE)
              mac_files <- list.files(".", pattern = "\\.tgz$")
              file.copy(mac_files, mac_path, overwrite = TRUE)
              tools::write_PACKAGES(mac_path, type = "mac.binary")
            }
          '

      - name: Test Repository
        run: |
          Rscript -e '
            # Add local repository to repos
            local_repo <- paste0("file:", getwd(), "/packages")
            repos <- c(local = local_repo, CRAN = "https://cloud.r-project.org")
            
            # List available packages
            available_pkgs <- available.packages(contrib.url(local_repo))
            print(available_pkgs)
            
            # Try installing from local repo
            install.packages(rownames(available_pkgs), repos = repos)
          '
          